<?xml version="1.0"?>
   <project xmlns:ivy="antlib:org.apache.ivy.ant" name="Tetris" default="run">
   <property name="build.dir" value="classes" />
   <property name="src.dir" value="src" />
   <property name="doc.dir" value="javadoc" />
   <property name="ivy.install.version" value="2.4.0"/>
   <property name="ivy.jar.dir" value="${basedir}/ivy"/>
   <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
   <property name="test.dir" value="classes/test" />
   <property name="test.src.dir" value="test" />
   <property name="library.dir" value="lib" />
   
   
 <path id="classpath.test">
    <pathelement location="lib/junit-4.12.jar"/>
    <pathelement location="lib/hamcrest-core-1.3.jar"/>
    <pathelement location="${build.dir}"/>
  </path>
   
   <target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<echo message="installing ivy..."/>
	<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
</target>
<target name="install-ivy" depends="download-ivy" description="--> install ivy">
<path id="ivy.lib.path">
<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
</path>
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
</target>

  <target name="test-compile" depends="build">
    <mkdir dir="${test.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.dir}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
  </target>

  <target name="test" depends="test-compile">
    <junit printsummary="on" haltonfailure="yes" fork="true">
        <classpath>
          <path refid="classpath.test"/>
          <pathelement location="${test.dir}"/>
        </classpath>
        <formatter type="brief" usefile="false" />
        <batchtest>
            <fileset dir="${test.src.dir}" includes="**/*Test*.java" />
        </batchtest>
    </junit>
  </target>
	
   <target name="build" depends="install-ivy" description="Compile source tree java files">
      <mkdir dir="${build.dir}"/>
	  <ivy:retrieve />
	  <path id="lib.path.id">
			<fileset dir="${library.dir}" includes="*.jar"/>
		</path>
      <javac destdir="${build.dir}" source="8" target="8">
         <src path="${src.dir}"/>
		 <exclude name="**/*package-info*.java" />
		<classpath>
			<path refid="lib.path.id"/>
			<path location="${build.dir}"/>
		</classpath>
      </javac>
   </target>
      

    <target name="run" depends="install-ivy, build, createJar">
	   <java fork="true" jar="Tetris.jar">

	   </java>
   </target>
   
   <target name="javadoc" >
	<delete dir="${doc.dir}" />
	<mkdir dir="${doc.dir}" />
		<javadoc destdir="${doc.dir}">	
			<fileset dir="${src.dir}" />
		</javadoc>
    <jar
        basedir="${doc.dir}"
        compress="${jar.compress}"
        jarfile="javadoc.jar" />
   </target>
   
	<target name="createJar" description="jars" depends="build">
		<jar jarfile="Tetris.jar" basedir="${build.dir}"  includes="**/*.class">
			<manifest>
				<attribute name="Main-Class" value="graphics.MainWindow" />
				<attribute name="Class-Path" value="lib/sqlite-jdbc-3.18.0.jar"/>
			</manifest>
		</jar>
	</target>  

	
	  
  <target name="check-compile">
	    <condition property="compile.exists">
      <available file="${build.dir}" type="dir"/>
    </condition>
  </target>
  
   <target name="clean" depends="check-compile" if="compile.exists">
   <echo>Cleaning up</echo>
		<delete dir="${ivy.jar.dir}" />
		<delete dir="${library.dir}" />
		<delete file="Tetris.jar" />
		<delete dir="${build.dir}" />
   </target>	
   
   
        <target name="javadoc-check">
    <condition property="javadoc.exists">
      <available file="${doc.dir}" type="dir"/>
    </condition>
  </target>
      <target name="clean-javadoc" depends="javadoc-check" if="javadoc.exists">
   <echo>Deleteing Javadocs</echo>
	<delete file="javadoc.jar" />
	<delete>
		<fileset dir="${doc.dir}">
			<include name="**/*.*" />
		</fileset>
	</delete>
	<delete dir="${doc.dir}" />
   </target>
   
           <target name="test-check">
    <condition property="test.exists">
      <available file="${test.dir}" type="dir"/>
    </condition>
  </target>
  
   <target name="clean-tests" depends="test-check" if="test.exists" >
	<delete dir="${test.dir}" />
   </target>
</project>